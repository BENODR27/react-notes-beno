To add JWT (JSON Web Token) authentication to your Express.js application with Sequelize, you can follow these steps:

1. **Install Dependencies**: First, install the necessary packages for JWT authentication:

```bash
npm install jsonwebtoken bcryptjs passport passport-jwt passport-local
```

2. **Configure Passport.js**: Passport.js is a middleware for authentication in Node.js applications. Configure it to use JWT strategy.

Create a `passport.js` file:

```javascript
const passport = require('passport');
const { Strategy: JwtStrategy, ExtractJwt } = require('passport-jwt');
const { User } = require('./models'); // Assuming you have a User model

const opts = {
  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
  secretOrKey: 'your_secret_key', // Replace with your own secret key
};

passport.use(new JwtStrategy(opts, async (jwt_payload, done) => {
  try {
    const user = await User.findByPk(jwt_payload.sub);
    if (!user) {
      return done(null, false);
    }
    return done(null, user);
  } catch (error) {
    return done(error, false);
  }
}));

module.exports = passport;
```

3. **Create JWT Middleware**: Create a middleware function to handle JWT authentication.

Create a `jwtAuth.js` file:

```javascript
const passport = require('./passport');

module.exports = passport.authenticate('jwt', { session: false });
```

4. **Implement JWT Signing and Verification**: You'll need functions to sign and verify JWT tokens.

```javascript
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

function generateToken(user) {
  return jwt.sign({ sub: user.id }, 'your_secret_key', { expiresIn: '1h' }); // Replace with your own secret key and token expiration time
}

function verifyPassword(password, hashedPassword) {
  return bcrypt.compare(password, hashedPassword);
}

module.exports = { generateToken, verifyPassword };
```

5. **Add Authentication Routes**: Create routes for user authentication (e.g., login, register).

```javascript
const express = require('express');
const router = express.Router();
const { User } = require('./models');
const { generateToken, verifyPassword } = require('./utils');

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    const isValidPassword = await verifyPassword(password, user.password);
    if (!isValidPassword) {
      return res.status(401).json({ message: 'Invalid password' });
    }
    const token = generateToken(user);
    res.json({ token });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
});

// Other authentication routes (e.g., register) go here

module.exports = router;
```

6. **Protect Routes with JWT Middleware**: Use the `jwtAuth` middleware to protect routes that require authentication.

```javascript
const express = require('express');
const router = express.Router();
const jwtAuth = require('./jwtAuth');

router.get('/protected-route', jwtAuth, (req, res) => {
  res.json({ message: 'Protected route accessed successfully' });
});

module.exports = router;
```

Remember to replace `'your_secret_key'` with your actual secret key and customize the routes and error handling according to your application's requirements.

With these steps, you have added JWT authentication to your Express.js application with Sequelize. This setup allows users to log in using their credentials and obtain a JWT token, which can then be used to access protected routes.