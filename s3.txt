To upload a file to AWS S3 using an API endpoint in a Node.js application, you'll need to utilize the AWS SDK for JavaScript (`aws-sdk`). Here's a step-by-step guide to achieve this:

1. **Install the AWS SDK**:
   Start by installing the `aws-sdk` package using npm:

   ```bash
   npm install aws-sdk
   ```

2. **Configure AWS SDK**:
   In your Node.js application, configure the AWS SDK with your AWS credentials and the region where your S3 bucket resides. You can obtain your AWS access key ID, secret access key, and region from the AWS Management Console.

   ```javascript
   const AWS = require('aws-sdk');

   AWS.config.update({
     accessKeyId: 'your_access_key_id',
     secretAccessKey: 'your_secret_access_key',
     region: 'your_s3_region'
   });
   ```

3. **Create an S3 Instance**:
   Create an instance of the AWS S3 service using the configured AWS SDK:

   ```javascript
   const s3 = new AWS.S3();
   ```

4. **Implement File Upload Endpoint**:
   Create an API endpoint in your Node.js application to handle file uploads. Use the `putObject` method of the S3 service to upload the file to your S3 bucket.

   ```javascript
   const express = require('express');
   const multer = require('multer');
   const upload = multer({ dest: 'uploads/' }); // Destination directory for temporary file uploads
   const router = express.Router();

   router.post('/upload', upload.single('file'), (req, res) => {
     const params = {
       Bucket: 'your_bucket_name',
       Key: req.file.originalname, // Use original file name as the key in S3
       Body: req.file.buffer // Buffer containing file data
     };

     s3.putObject(params, (err, data) => {
       if (err) {
         console.error('Error uploading file to S3', err);
         return res.status(500).json({ error: 'Failed to upload file to S3' });
       }
       console.log('File uploaded successfully to S3', data);
       res.status(200).json({ message: 'File uploaded successfully to S3' });
     });
   });

   module.exports = router;
   ```

   This endpoint expects a file upload with the field name `'file'`. Adjust the destination directory for temporary file uploads (`'uploads/'`) as needed.

5. **Use the Endpoint**:
   Use the file upload endpoint in your client application (e.g., frontend, another backend service) to upload files to AWS S3. Ensure that the request includes a file to upload.

6. **Handle Access Control**:
   Ensure that your S3 bucket is configured with the appropriate access control settings to allow uploads from your Node.js application. You may need to adjust bucket policies and IAM roles to grant the necessary permissions.

By following these steps, you can create an API endpoint in your Node.js application to upload files to AWS S3. Adjust the configuration and implementation according to your specific requirements and security considerations.